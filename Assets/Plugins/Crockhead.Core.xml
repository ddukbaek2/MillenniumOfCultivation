<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Crockhead.Core</name>
    </assembly>
    <members>
        <member name="T:Crockhead.Core.Disposable">
            <summary>
            해제 가능한 객체.
            <para>명시적으로 내부 자원의 사용 해제 구간이 존재하는 객체를 의미.</para>
            <para>단, Dispose()가 호출되더라도 이것이 객체 자체의 제거를 의미하진 않으므로 실제 객체가 null이 되려면 이후 모든 참조를 끊어야 한다.</para>
            <para>IDotNetDisposable 인터페이스 구현체.</para>
            <para>IDisposable 인터페이스 구현체.</para>
            <para>ObjectDisposedException는 일단 사용하지 않음.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.Disposable.m_IsDisposed">
            <summary>
            해제 되었는지 여부.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Disposable.IsDisposed">
            <summary>
            해제 되었는지 여부 프로퍼티.
            <para>IDisposable 인터페이스 구현.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposable.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposable.Finalize">
            <summary>
            소멸됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposable.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
            <param name="explicitDisposing">명시적인 해제 여부. (직접적인 Dispose() 호출을 통한 해제)</param>
        </member>
        <member name="M:Crockhead.Core.Disposable.System#IDisposable#Dispose">
            <summary>
            해제.
            <para>IDotNetDisposable 인터페이스 구현.</para>
            </summary>
        </member>
        <member name="T:Crockhead.Core.Disposables">
            <summary>
            해제 가능한 객체의 주요 유틸리티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.Create``1(System.Object[])">
            <summary>
            객체 생성. (기본)
            <para>명시적 함수로 생성. (new TDisposable()로 생성해도 결과는 동일)</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.CreateWeakReference``1(System.Object[])">
            <summary>
            약한 참조로 객체 생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.DotNetDispose(System.IDisposable)">
            <summary>
            해제. (시스템)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.Dispose(Crockhead.Core.IDisposable)">
            <summary>
            해제. (기본)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.IsDisposed(Crockhead.Core.IDisposable)">
            <summary>
            해제 여부 반환. (기본)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.Dispose(System.Object)">
            <summary>
            아무 객체나 넣어서 해제 가능하면 해제.
            <para>해제되었거나, 해제하면 참 반환.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.IsDisposed(System.Object)">
            <summary>
            아무 객체나 넣어서 해제 여부를 얻어낼 수 있으면 여부 반환.
            <para>객체가 null일 경우 해제된 것으로 판정.</para>
            <para>객체가 IDisposable의 IsDisposed 프로퍼티로 해제 여부 판정.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.Disposables.SafeDispose``1(``0@)">
            <summary>
            안전한 해제. (제너릭)
            <para>해제 후 null값을 대입.</para>
            </summary>
        </member>
        <member name="T:Crockhead.Core.IDisposable">
            <summary>
            해제 할 수 있는 객체 인터페이스.
            <para>기존 IDotNetDisposable를 확장.</para>
            <para>using 키워드 사용 가능.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IDisposable.IsDisposed">
            <summary>
            해제 되었는지 여부 프로퍼티.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Reflections">
            <summary>
            리플렉션 기능 관련 주요 유틸리티.
            </summary>
            <summary>
            리플렉션 기능 관련 주요 유틸리티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.IsBaseClass(System.Object,System.Type)">
            <summary>
            대상 인스턴스가 대상 타입을 상속받거나 대상 타입인지 여부 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.IsBaseClass(System.Type,System.Type)">
            <summary>
            대상 인스턴스가 대상 타입을 상속받거나 대상 타입인지 여부 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.CreateInstance(System.Type,System.Object[])">
            <summary>
            인스턴스 생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.InvokeInstanceMethod(System.Object,System.String,System.Object[])">
            <summary>
            인스턴스 메소드 대리 호출.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.InvokeStaticMethod(System.Type,System.String,System.Object[])">
            <summary>
            스태틱 메소드 대리 호출.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.TryGetAttribute(System.Type,System.Type,System.Attribute@)">
            <summary>
            어트리뷰트 가져오기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.CreateInstance``1(System.Object[])">
            <summary>
            인스턴스 생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.InvokeInstanceMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            인스턴스 메소드 대리 호출.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.TryGetAttribute``1(System.Type,``0@)">
            <summary>
            어트리뷰트 가져오기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Reflections.GetEnumValues``1">
            <summary>
            열거체 목록 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Void">
            <summary>
            빈 구조체.
            <para>다양한 제네릭 요소로 활용.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.Void.Value">
            <summary>
            빈 값.
            </summary>
        </member>
        <member name="T:Crockhead.Core.LockedDictionary`2">
            <summary>
            쓰레드 안전한 딕셔너리. (Lock 기반)
            </summary>
        </member>
        <member name="F:Crockhead.Core.LockedDictionary`2.m_Lock">
            <summary>
            락 오브젝트.
            </summary>
        </member>
        <member name="F:Crockhead.Core.LockedDictionary`2.m_Items">
            <summary>
            딕셔너리.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedDictionary`2.Count">
            <summary>
            현재 개수 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedDictionary`2.Item(`0)">
            <summary>
            인덱서 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.Clear">
            <summary>
            모든 항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.TryAdd(`0,`1)">
            <summary>
            항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.AddOrSet(`0,`1)">
            <summary>
            항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.TryRemove(`0,`1@)">
            <summary>
            항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.Add(`0,`1)">
            <summary>
            항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.Remove(`0)">
            <summary>
            항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.ContainsKey(`0)">
            <summary>
            항목 포함 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.ContainsValue(`1)">
            <summary>
            항목 포함 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            키 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            항목 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.ToValues">
            <summary>
            전체 항목 스냅샷 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedDictionary`2.ToArray">
            <summary>
            전체 항목 스냅샷 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Core.LockedList`1">
            <summary>
            스레드 안전한 리스트. (Lock 기반)
            </summary>
        </member>
        <member name="F:Crockhead.Core.LockedList`1.m_Lock">
            <summary>
            락 오브젝트.
            </summary>
        </member>
        <member name="F:Crockhead.Core.LockedList`1.m_Items">
            <summary>
            리스트.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedList`1.Item(System.Int32)">
            <summary>
            인덱서 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedList`1.Count">
            <summary>
            현재 개수 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.Add(`0)">
            <summary>
            항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            여러 항목 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.Insert(System.Int32,`0)">
            <summary>
            특정 위치에 항목 삽입.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.Remove(`0)">
            <summary>
            항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.RemoveAt(System.Int32)">
            <summary>
            특정 위치의 항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.Clear">
            <summary>
            모든 항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.IndexOf(`0)">
            <summary>
            항목의 위치 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.Contains(`0)">
            <summary>
            항목 포함 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.ToArray">
            <summary>
            전체 항목 스냅샷 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.ForEach(System.Action{`0})">
            <summary>
            전체 항목 순회 (읽기 전용).
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedList`1.ForEachUnlocked(System.Action{`0})">
            <summary>
            전체 항목 순회 (읽기 전용).
            </summary>
        </member>
        <member name="T:Crockhead.Core.LockedMultiDictionary`2">
            <summary>
            스레드 안전한 멀티맵. (Lock 기반)
            </summary>
        </member>
        <member name="F:Crockhead.Core.LockedMultiDictionary`2.m_Dictionary">
            <summary>
            딕셔너리.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedMultiDictionary`2.KeyCount">
            <summary>
            키 갯수 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.LockedMultiDictionary`2.ValueCount">
            <summary>
            전체 값 갯수 프로퍼티. (스캔)
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.EnsureBucket(`0)">
            <summary>
            버킷을 얻되, 없으면 레이스 안전하게 생성하여 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.Clear">
            <summary>
            모든 항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.Add(`0,`1)">
            <summary>
            추가: 키가 없으면 버킷 생성 후 값 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            여러 값 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.Remove(`0,`1)">
            <summary>
            특정 키에서 값 하나 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.RemoveKey(`0)">
            <summary>
            키 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.RemoveValue(`1)">
            <summary>
            값 하나를 아무 키에서든 제거. (최초 1건)
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.ContainsKey(`0)">
            <summary>
            키 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.Contains(`0,`1)">
            <summary>
            특정 키에 값 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.ContainsValue(`1)">
            <summary>
            어느 키든 해당 값이 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            해당 값을 가진 키 하나 찾기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.ToValues(`0)">
            <summary>
            키가 소유한 값들을 배열로 스냅샷.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.ToValues">
            <summary>
            모든 값을 배열로 스냅샷.
            </summary>
        </member>
        <member name="M:Crockhead.Core.LockedMultiDictionary`2.ToArray">
            <summary>
            키와 값 쌍을 배열로 스냅샷.
            </summary>
        </member>
        <member name="T:Crockhead.Core.MultiDictionary`2">
            <summary>
            멀티맵.
            </summary>
        </member>
        <member name="F:Crockhead.Core.MultiDictionary`2.m_Dictionary">
            <summary>
            딕셔너리.
            </summary>
        </member>
        <member name="P:Crockhead.Core.MultiDictionary`2.KeyCount">
            <summary>
            키 갯수 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.MultiDictionary`2.ValueCount">
            <summary>
            전체 값 갯수 프로퍼티. (스캔)
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.EnsureBucket(`0)">
            <summary>
            버킷을 얻되, 없으면 생성하여 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.Clear">
            <summary>
            모든 항목 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.Add(`0,`1)">
            <summary>
            추가: 키가 없으면 버킷 생성 후 값 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.AddRange(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            여러 값 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            특정 키에서 값 하나 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.RemoveKey(`0)">
            <summary>
            키 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.RemoveValue(`1)">
            <summary>
            값 하나를 아무 키에서든 제거. (최초 1건)
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            키 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.Contains(`0,`1)">
            <summary>
            특정 키에 값 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.ContainsValue(`1)">
            <summary>
            어느 키든 해당 값이 존재하는지 여부 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            해당 값을 가진 키 하나 찾기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.ToValues(`0)">
            <summary>
            키가 소유한 값들을 배열로 스냅샷.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.ToValues">
            <summary>
            모든 값을 배열로 스냅샷.
            </summary>
        </member>
        <member name="M:Crockhead.Core.MultiDictionary`2.ToArray">
            <summary>
            키와 값 쌍을 배열로 스냅샷.
            </summary>
        </member>
        <member name="T:Crockhead.Core.EventDispatcher">
            <summary>
            이벤트 전달자.
            </summary>
        </member>
        <member name="F:Crockhead.Core.EventDispatcher.m_Delegate">
            <summary>
            메서드 목록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.Register(System.Delegate)">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.Unregister(System.Delegate)">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.Clear">
            <summary>
            전체 비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.IsRegistered(System.Delegate)">
            <summary>
            등록 여부 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher.Dispatch(System.Object[])">
            <summary>
            등록된 모든 개체에게 이벤트 전달.
            </summary>
        </member>
        <member name="T:Crockhead.Core.EventDispatcher`1">
            <summary>
            제네릭 이벤트 전달자.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher`1.Register(`0)">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher`1.Unregister(`0)">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.EventDispatcher`1.IsRegistered(`0)">
            <summary>
            등록 여부 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Core.GuidIdentifiers">
            <summary>
            Guid 타입의 고유 식별자 생성기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.GuidIdentifiers.#ctor">
            <summary>
            생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.GuidIdentifiers.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.GuidIdentifiers.CreateIdentifier">
            <summary>
            식별자 생성.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Identifiers`1">
            <summary>
            제네릭 고유 식별자 생성기 + 컬렉션.
            - IEnumerable(TResult) 인터페이스 구현체.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Identifiers`1.m_Identifiers">
            <summary>
            할당된 고유 식별자 목록.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Identifiers`1.Count">
            <summary>
            할당된 고유식별자 갯수.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.CreateIdentifier">
            <summary>
            식별자 생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.Generate">
            <summary>
            고유 식별자 생성.
            - IUniqueIdentifierGenerator(TResult) 인터페이스 구현.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.Clear">
            <summary>
            비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.Synchronize(Crockhead.Core.Identifiers{`0})">
            <summary>
            other를 기준으로 현재 식별자 할당 상태를 최신화.
            - IUniqueIdentifierGenerator(TResult) 인터페이스 구현.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.Release(`0)">
            <summary>
            고유 식별자 사용 종료.
            - IUniqueIdentifierGenerator(TResult) 인터페이스 구현.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.System#Collections#Generic#IEnumerable{TIdentifier}#GetEnumerator">
            <summary>
            반복자 반환.
            - IEnumerable(ulong) 인터페이스 구현.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Identifiers`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            반복자 반환.
            - IEnumerable 인터페이스 구현.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IIdentifiable`1">
            <summary>
            고유 식별자를 가질 수 있는 객체 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Core.IIdentifiable`1.Identifier">
            <summary>
            객체 생성시 자동으로 생성 되어 객체의 유일성을 증명하는 고유 식별자.
            </summary>
        </member>
        <member name="T:Crockhead.Core.NumberIdentifiers">
            <summary>
            ulong 타입의 고유 식별자 생성기.
            </summary>
        </member>
        <member name="F:Crockhead.Core.NumberIdentifiers.m_RandomNumberGenerator">
            <summary>
            랜덤 생성기.
            </summary>
        </member>
        <member name="F:Crockhead.Core.NumberIdentifiers.m_ByteBuffer">
            <summary>
            바이트 배열 버퍼.
            </summary>
        </member>
        <member name="M:Crockhead.Core.NumberIdentifiers.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.NumberIdentifiers.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.NumberIdentifiers.CreateIdentifier">
            <summary>
            식별자 생성.
            </summary>
        </member>
        <member name="T:Crockhead.Core.StringIdentifiers">
            <summary>
            문자열 타입의 고유 식별자 생성기.
            </summary>
        </member>
        <member name="F:Crockhead.Core.StringIdentifiers.Chars">
            <summary>
            사용 할 문자 목록.
            </summary>
        </member>
        <member name="F:Crockhead.Core.StringIdentifiers.m_StringBuilder">
            <summary>
            문자열 생성기.
            </summary>
        </member>
        <member name="F:Crockhead.Core.StringIdentifiers.m_Chars">
            <summary>
            사용할 문자 목록.
            </summary>
        </member>
        <member name="F:Crockhead.Core.StringIdentifiers.m_MinLength">
            <summary>
            최소 문자열 길이.
            </summary>
        </member>
        <member name="F:Crockhead.Core.StringIdentifiers.m_MaxLength">
            <summary>
            최소 문자열 길이.
            </summary>
        </member>
        <member name="M:Crockhead.Core.StringIdentifiers.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.StringIdentifiers.#ctor(System.Int32,System.String)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.StringIdentifiers.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.StringIdentifiers.CreateIdentifier">
            <summary>
            식별자 생성.
            </summary>
        </member>
        <member name="T:Crockhead.Core.FilePathAttribute">
            <summary>
            연결된 파일 경로를 수식하는 특성.
            </summary>
        </member>
        <member name="F:Crockhead.Core.FilePathAttribute.m_Value">
            <summary>
            값.
            </summary>
        </member>
        <member name="F:Crockhead.Core.FilePathAttribute.m_IsEnabled">
            <summary>
            사용 여부.
            </summary>
        </member>
        <member name="P:Crockhead.Core.FilePathAttribute.Value">
            <summary>
            값 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.FilePathAttribute.IsEnabled">
            <summary>
            사용 여부 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.FilePathAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IReader`1">
            <summary>
            리더.
            </summary>
        </member>
        <member name="P:Crockhead.Core.IReader`1.Result">
            <summary>
            읽은 결과.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IReader`1.Read">
            <summary>
            읽기.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IWritter">
            <summary>
            라이터.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IWritter.Write">
            <summary>
            쓰기.
            </summary>
        </member>
        <member name="T:Crockhead.Core.INotifiable">
            <summary>
            통보 대상 인터페이스.
            </summary>
        </member>
        <member name="T:Crockhead.Core.INotification">
            <summary>
            통보 내용 인터페이스.
            </summary>
        </member>
        <member name="T:Crockhead.Core.NotifiableMethodAttribute">
            <summary>
            통보 메서드 특성.
            </summary>
        </member>
        <member name="P:Crockhead.Core.NotifiableMethodAttribute.NotificationType">
            <summary>
            INotification 인터페이스를 상속 받은 통지 객체의 타입.
            </summary>
        </member>
        <member name="M:Crockhead.Core.NotifiableMethodAttribute.#ctor(System.Type)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Notification">
            <summary>
            통보 객체. (샘플)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notification.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notification.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Notifier">
            <summary>
            통보자.
            <para>[NotifiableMethod(typeof(Notification))]void OnNotification(Notification){}</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.Notifier.m_CachedDictionary">
            <summary>
            메서드 정보 목록. (캐시)
            <para>{ Key: typeof(INotifiable), Value: { Key: typeof(INotification), Value: MethodInfo[] } }</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notifier.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notifier.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notifier.Register(Crockhead.Core.INotifiable)">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notifier.Send(Crockhead.Core.INotifiable,Crockhead.Core.INotification)">
            <summary>
            대상 지정 통보.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Notifier.Notify(Crockhead.Core.INotification)">
            <summary>
            전체 통보.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IOperation">
            <summary>
            명령 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsStarted">
            <summary>
            시작 여부 프로퍼티.
            <para>Start() 호출 이후 Reset() 호출 전까지는 계속 True.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsRunning">
            <summary>
            진행 중 여부 프로퍼티.
            <para>IsStarted + IsCompleted</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsCompleted">
            <summary>
            완료 여부 프로퍼티. (=Task.IsCompleted)
            <para>Start() 호출 이후 Success(), Fail(), Cancel() 호출 이후 Reset() 호출 전까지는 계속 True.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsSucceeded">
            <summary>
            완료 + 성공 여부 프로퍼티. (=Task.IsCompletedSuccessfully)
            <para>Success() 호출 이후 True.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsFaulted">
            <summary>
            완료 + 실패 여부 프로퍼티. (=Task.IsFaulted)
            <para>Fail() 호출 이후 True.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.IsCanceled">
            <summary>
            완료 + 취소 여부 프로퍼티. (=Task.IsCanceled)
            <para>Cancel() 호출 이후 True.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.Exception">
            <summary>
            실패 시 예외 프로퍼티.
            <para>Fail() 호출시 입력한 Exception.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation.Status">
            <summary>
            상태 프로퍼티.
            <para>IsStarted, IsCompleted, IsSucceeded, IsFaulted, IsCanceled에 의한 현재 상황.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.SetOperation(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.SetCompletion(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.Reset">
            <summary>
            재초기화.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.Start">
            <summary>
            시작.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.Success">
            <summary>
            성공.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.Fail(System.Exception)">
            <summary>
            실패.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation.Cancel">
            <summary>
            취소.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IOperation`1">
            <summary>
            결과값 있는 명령 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Core.IOperation`1.Result">
            <summary>
            결과.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation`1.Success">
            <summary>
            성공. (사용금지)
            </summary>
        </member>
        <member name="M:Crockhead.Core.IOperation`1.Success(`0)">
            <summary>
            성공.
            <para>기존의 Success()는 결과 설정이 불가능하므로 사용 금지.</para>
            </summary>
        </member>
        <member name="T:Crockhead.Core.Operation">
            <summary>
            명령.
            <para>수동으로 Start / Complete / Cancel 호출 필요.</para>
            <para>명령 콜백으로부터 실제 처리할 작업을 하고, 끝나면 직접 Operation의 Complete() or Cancel() 호출하여 작업 완료 처리 필수.</para>
            <para>취소의 경우 즉시 명령이 실행되고 동일 스택에서 결과까지 반영되는 동기적 사용시 쓸 수 없음.</para>
            <para>operation에서 OperationCanceledException 해도 취소 가능.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_Operation">
            <summary>
            명령 처리 콜백.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_Completion">
            <summary>
            명령 완료 콜백.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_IsStarted">
            <summary>
            시작 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_IsCompleted">
            <summary>
            완료 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_IsSucceeded">
            <summary>
            성공 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_IsCancelled">
            <summary>
            취소 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation.m_Exception">
            <summary>
            실패 예외.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsStarted">
            <summary>
            시작 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsRunning">
            <summary>
            진행 중 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsCompleted">
            <summary>
            완료 여부 프로퍼티. (=Task.IsCompleted)
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsSucceeded">
            <summary>
            완료 + 성공 여부 프로퍼티. (=Task.IsCompletedSuccessfully)
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsFaulted">
            <summary>
            완료 + 실패 여부 프로퍼티. (=Task.IsFaulted)
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.IsCanceled">
            <summary>
            완료 + 취소 여부 프로퍼티. (=Task.IsCanceled)
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.Exception">
            <summary>
            실패 시 예외 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation.Status">
            <summary>
            상태 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.#ctor(System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.#ctor(System.Action{Crockhead.Core.IOperation},System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.OnReset">
            <summary>
            재초기화됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.OnStarted">
            <summary>
            시작됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.OnCompleted(System.Boolean)">
            <summary>
            완료됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.SetOperation(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.SetCompletion(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Reset">
            <summary>
            재초기화.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Start">
            <summary>
            시작.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Complete(System.Boolean)">
            <summary>
            완료.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Success">
            <summary>
            성공.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Fail(System.Exception)">
            <summary>
            실패.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation.Cancel">
            <summary>
            취소.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Operation`1">
            <summary>
            결과가 포함된 명령.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Operation`1.m_Result">
            <summary>
            결과.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Operation`1.Result">
            <summary>
            결과 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.#ctor(System.Action{Crockhead.Core.Operation{`0}})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.#ctor(System.Action{Crockhead.Core.Operation{`0}},System.Action{Crockhead.Core.Operation{`0}})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.OnReset">
            <summary>
            재초기화됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.SetOperation(System.Action{Crockhead.Core.Operation{`0}})">
            <summary>
            명령 설정. (오버로딩)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.SetCompletion(System.Action{Crockhead.Core.Operation{`0}})">
            <summary>
            명령 설정. (오버로딩)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.SetResult(`0)">
            <summary>
            결과 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.Success">
            <summary>
            성공. (사용금지)
            </summary>
        </member>
        <member name="M:Crockhead.Core.Operation`1.Success(`0)">
            <summary>
            성공. (오버로딩)
            </summary>
        </member>
        <member name="T:Crockhead.Core.Operations">
            <summary>
            오퍼레이션 유틸리티.
            </summary>
        </member>
        <member name="T:Crockhead.Core.OperationStatus">
            <summary>
            명령 상태.
            </summary>
        </member>
        <member name="F:Crockhead.Core.OperationStatus.Wait">
            <summary>
            시작 전 대기.
            </summary>
        </member>
        <member name="F:Crockhead.Core.OperationStatus.Running">
            <summary>
            시작되어 동작 중.
            </summary>
        </member>
        <member name="F:Crockhead.Core.OperationStatus.Succeeded">
            <summary>
            작업 완료 및 성공됨.
            </summary>
        </member>
        <member name="F:Crockhead.Core.OperationStatus.Faulted">
            <summary>
            작업 중 실패됨.
            </summary>
        </member>
        <member name="F:Crockhead.Core.OperationStatus.Canceled">
            <summary>
            작업 중 취소됨.
            </summary>
        </member>
        <member name="T:Crockhead.Core.SequentialActionExecutor">
            <summary>
            순차적 액션 실행기.
            <para>액션을 실행할 때 기존 액션이 있다면 내부적으로 큐에 쌓아 보류(Pending)시키고 순서대로 하나씩 순차적(Sequential)으로 처리.</para>
            <para>성공/실패 개념은 없음.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.SequentialActionExecutor.m_IsRunning">
            <summary>
            동작 중인지 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SequentialActionExecutor.m_PendingQueue">
            <summary>
            보류 중인 명령 목록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.Execute(System.Action)">
            <summary>
            명령 실행.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.Execute(System.Action{System.Action})">
            <summary>
            비동기적 명령 실행.
            <para>실행 후 수동 종료 함수 호출 필요.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.BeginOperation">
            <summary>
            명령 처리 시작.
            <para>현재 명령이 처리 중이 아닐 경우, 쌓여있는 다음 명령 수행을 시도함.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialActionExecutor.EndOperation">
            <summary>
            명령 처리 종료.
            </summary>
        </member>
        <member name="T:Crockhead.Core.SequentialOperationExecutor">
            <summary>
            순차적 명령 실행기.
            <para>명령을 실행할 때 기존 명령이 있다면 내부적으로 큐에 쌓아 보류(Pending)시키고 순서대로 하나씩 순차적(Sequential)으로 처리.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Core.SequentialOperationExecutor.m_PendingQueue">
            <summary>
            보류 중인 명령 목록.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SequentialOperationExecutor.m_IsContinuing">
            <summary>
            재진입 방어.
            </summary>
        </member>
        <member name="P:Crockhead.Core.SequentialOperationExecutor.IsRunning">
            <summary>
            진행 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.SequentialOperationExecutor.Current">
            <summary>
            현재 오퍼레이션.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.Clear">
            <summary>
            모든 작업 중단하고 큐 비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.Cancel">
            <summary>
            현재 명령 취소.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.Execute(System.Action)">
            <summary>
            명령 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.Execute(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 실행.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SequentialOperationExecutor.Continue">
            <summary>
            이어서 명령 처리.
            </summary>
        </member>
        <member name="T:Crockhead.Core.IRegistry`1">
            <summary>
            등록 주체 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Core.IRegistry`1.Count">
            <summary>
            등록된 대상 갯수 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IRegistry`1.Register(`0)">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IRegistry`1.Unregister(`0)">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.IRegistry`1.Clear">
            <summary>
            비우기. (전체 등록 해제)
            </summary>
        </member>
        <member name="M:Crockhead.Core.IRegistry`1.IsRegistered(`0)">
            <summary>
            등록 되었는지 여부.
            </summary>
        </member>
        <member name="T:Crockhead.Core.Registry`1">
            <summary>
            등록 컨테이너.
            </summary>
        </member>
        <member name="F:Crockhead.Core.Registry`1.m_Data">
            <summary>
            등록 대상 목록.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Registry`1.Count">
            <summary>
            등록된 대상 갯수 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.Registry`1.Values">
            <summary>
            반복자 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.Register(`0)">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.Unregister(`0)">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.Clear">
            <summary>
            전체 등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.IsRegistered(`0)">
            <summary>
            등록 되었는지 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            반복자 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.Registry`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            반복자 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Core.SharedClass`1">
            <summary>
            공유 클래스.
            </summary>
        </member>
        <member name="P:Crockhead.Core.SharedClass`1.IsCreated">
            <summary>
            생성 되었는지 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.SharedClass`1.Instance">
            <summary>
            공유 클래스 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Core.SharedClass`1.IsExplicitCreated">
            <summary>
            현재 인스턴스가 명시적인 생성인지 여부. (직접 Create() 호출)
            </summary>
        </member>
        <member name="P:Crockhead.Core.SharedClass`1.Arguments">
            <summary>
            생성시 입력한 아규먼트.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.OnCreate(System.Object[])">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.Create(System.Object[])">
            <summary>
            생성.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.IsSharedInstance(`0)">
            <summary>
            대상 인스턴스가 공유 인스턴스인지 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedClass`1.Dispose(`0)">
            <summary>
            해제.
            </summary>
        </member>
        <member name="T:Crockhead.Core.SharedInstances">
            <summary>
            공유 인스턴스 유틸리티.
            <para>제너릭 캐싱이라 박싱,언박싱 없고 접근비용 O(1) 및 필드 접근 수준의 히트캐시.</para>
            </summary>
        </member>
        <member name="T:Crockhead.Core.SharedInstances.Container`1">
            <summary>
            값을 보관하는 객체.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SharedInstances.Container`1.s_IsSet">
            <summary>
            값 존재 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SharedInstances.Container`1.s_Value">
            <summary>
            값.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Container`1.Set(`0)">
            <summary>
            값 채우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Container`1.Unset">
            <summary>
            값 비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Container`1.Get">
            <summary>
            값 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Container`1.IsSet">
            <summary>
            값 존재 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SharedInstances.s_unsetActions">
            <summary>
            값 비우기 액션 목록.
            </summary>
        </member>
        <member name="F:Crockhead.Core.SharedInstances.s_TemporaryActions">
            <summary>
            레퍼런스 복제용.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Unregister(System.Type)">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Clear">
            <summary>
            전체 값 비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Register``1">
            <summary>
            등록.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Unregister``1">
            <summary>
            등록 해제.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Set``1(``0)">
            <summary>
            값 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Unset``1">
            <summary>
            값 비우기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.Get``1">
            <summary>
            가져오기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.TryGet``1(``0@)">
            <summary>
            가져오기.
            </summary>
        </member>
        <member name="M:Crockhead.Core.SharedInstances.IsSet``1">
            <summary>
            값 존재 유무.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.AsyncOperation">
            <summary>
            비동기 오퍼레이션.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.AsyncOperation.m_Awaiter">
            <summary>
            대기자.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation.#ctor(System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation.#ctor(System.Action{Crockhead.Core.IOperation},System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation.Crockhead#Experimental#IAwaitable{Crockhead#Experimental#IAwaiter}#GetAwaiter">
            <summary>
            대기자 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.AsyncOperation`1">
            <summary>
            결과값 있는 비동기 오퍼레이션.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.AsyncOperation`1.m_Awaiter">
            <summary>
            대기자.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation`1.#ctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation`1.#ctor(System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation`1.#ctor(System.Action{Crockhead.Core.IOperation},System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.AsyncOperation`1.Crockhead#Experimental#IAwaitable{Crockhead#Experimental#IAwaiter{TResult},TResult}#GetAwaiter">
            <summary>
            대기자 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAsyncOperation">
            <summary>
            비동기 명령 인터페이스.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAsyncOperation`1">
            <summary>
            결과값 있는 비동기 명령 인터페이스.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAwaitable`1">
            <summary>
            대기 할 수 있는 객체 인터페이스.
            <para>await 키워드 사용 가능.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.IAwaitable`1.GetAwaiter">
            <summary>
            대기자 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAwaitable`2">
            <summary>
            대기 할 수 있는 객체 인터페이스.
            <para>await 키워드 사용 가능.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.IAwaitable`2.GetAwaiter">
            <summary>
            대기자 반환.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAwaiter">
            <summary>
            대기자 인터페이스.
            <para>실제적인 대기 기능을 DotNet 명세에 따라 구현.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.IAwaiter.IsCompleted">
            <summary>
            작업 완료 여부 프로퍼티.
            <para>참 일 경우 IAwaiter.GetResult() 거짓 일 경우 INotifyCompletion.OnCompleted() ==> continuation ==> IAwaiter.GetResult()</para>
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.IAwaiter.GetResult">
            <summary>
            작업 완료 시 호출됨. (결과값 없음)
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.IAwaiter`1">
            <summary>
            결과값 있는 대기자 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.IAwaiter`1.IsCompleted">
            <summary>
            작업 완료 여부 프로퍼티.
            <para>참 일 경우 IAwaiter.GetResult() 거짓 일 경우 INotifyCompletion.OnCompleted() ==> continuation ==> IAwaiter.GetResult()</para>
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.IAwaiter`1.GetResult">
            <summary>
            작업 완료 시 호출됨. (결과값 반환)
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.OperationAwaiter">
            <summary>
            명령 대기자.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.OperationAwaiter.m_Operation">
            <summary>
            명령.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationAwaiter.Crockhead#Experimental#IAwaiter#IsCompleted">
            <summary>
            완료 여부 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter.#ctor(Crockhead.Experimental.IAsyncOperation)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            await 키워드에서 호출됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <summary>
            await 키워드에서 호출됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter.Crockhead#Experimental#IAwaiter#GetResult">
            <summary>
            결과 처리.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.OperationAwaiter`1">
            <summary>
            결과값 있는 대기자.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.OperationAwaiter`1.m_Operation">
            <summary>
            명령.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationAwaiter`1.Crockhead#Experimental#IAwaiter{TResult}#IsCompleted">
            <summary>
            완료 여부 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter`1.#ctor(Crockhead.Experimental.IAsyncOperation{`0})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter`1.System#Runtime#CompilerServices#INotifyCompletion#OnCompleted(System.Action)">
            <summary>
            await 키워드에서 호출됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter`1.System#Runtime#CompilerServices#ICriticalNotifyCompletion#UnsafeOnCompleted(System.Action)">
            <summary>
            await 키워드에서 호출됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationAwaiter`1.Crockhead#Experimental#IAwaiter{TResult}#GetResult">
            <summary>
            결과 처리.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.OperationExecutor`1">
            <summary>
            명령으로 처리기.
            <para>생성자의 operation 입력 필수.</para>
            <para>취소는 operation에서 throw new OperationCanceledException() 호출.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.OperationExecutor`1.m_Operation">
            <summary>
            명령.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.OperationExecutor`1.m_Action">
            <summary>
            액션.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsStarted">
            <summary>
            시작 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsRunning">
            <summary>
            진행 중 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsCompleted">
            <summary>
            완료 여부 프로퍼티. (=Task.IsCompleted)
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsSucceeded">
            <summary>
            완료 + 성공 여부 프로퍼티. (=Task.IsCompletedSuccessfully)
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsFaulted">
            <summary>
            완료 + 실패 여부 프로퍼티. (=Task.IsFaulted)
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.IsCanceled">
            <summary>
            완료 + 취소 여부 프로퍼티. (=Task.IsCanceled)
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.Exception">
            <summary>
            실패 시 예외 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`1.Status">
            <summary>
            상태 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.#ctor(System.Action{`0},System.Action{`0})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Execute">
            <summary>
            실행.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.SetOperation(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.SetCompletion(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Reset">
            <summary>
            재초기화.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Start">
            <summary>
            시작.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Success">
            <summary>
            성공.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Fail(System.Exception)">
            <summary>
            실패.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`1.Cancel">
            <summary>
            취소.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.OperationExecutor`2">
            <summary>
            명령으로 결과를 얻어오는 처리기.
            <para>생성자의 operation 입력 필수.</para>
            <para>취소는 operation에서 throw new OperationCanceledException() 호출.</para>
            </summary>
        </member>
        <member name="P:Crockhead.Experimental.OperationExecutor`2.Result">
            <summary>
            결과.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`2.#ctor(System.Action{`0},System.Action{`0})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`2.Execute">
            <summary>
            실행.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.OperationExecutor`2.Success(`1)">
            <summary>
            성공.
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.TaskWatchOperation">
            <summary>
            태스크 상태 확인 오퍼레이션.
            </summary>
        </member>
        <member name="F:Crockhead.Experimental.TaskWatchOperation.m_Task">
            <summary>
            태스크.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.#ctor(System.Threading.Tasks.Task)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.#ctor(System.Threading.Tasks.Task,System.Action{Crockhead.Core.IOperation})">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.OnTask(System.Threading.Tasks.Task)">
            <summary>
            태스크 상태 확인.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.Reset">
            <summary>
            재사용.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.SetOperation(System.Action{Crockhead.Core.IOperation})">
            <summary>
            명령 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.OnStarted">
            <summary>
            시작됨.
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.Success">
            <summary>
            성공. (호출 금지)
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.Fail(System.Exception)">
            <summary>
            실패. (호출 금지)
            </summary>
        </member>
        <member name="M:Crockhead.Experimental.TaskWatchOperation.Cancel">
            <summary>
            취소. (호출 금지)
            </summary>
        </member>
        <member name="T:Crockhead.Experimental.VoidOperation">
            <summary>
            결과값 없는 명령.
            <para>Operation과 Operation.T의 상속적인 구조 결합 기능.</para>
            </summary>
        </member>
        <member name="T:Crockhead.Logging.IJournalEntry">
            <summary>
            일지 기록 데이터 인터페이스
            </summary>
        </member>
        <member name="P:Crockhead.Logging.IJournalEntry.Level">
            <summary>
            수준.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.IJournalFilter">
            <summary>
            일지 필터 인터페이스.
            <para>참을 반환할 경우에만 기록.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalFilter.ShouldLog(Crockhead.Logging.IJournalLogger,Crockhead.Logging.IJournalEntry)">
            <summary>
            엔트리를 로그 해야하는지 여부.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.IJournalLogger">
            <summary>
            일지 인터페이스.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalLogger.AddFilter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalLogger.RemoveFilter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalLogger.RemoveAllFilters">
            <summary>
            필터 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalLogger.ContainsWriter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 포함 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.IJournalLogger.Log(Crockhead.Logging.IJournalEntry)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.Journal">
            <summary>
            일지 처리자.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Journal.m_Filters">
            <summary>
            수준 필터.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Journal.AsJournalLogger">
            <summary>
            인터페이스 변환 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.#ctor(System.String,Crockhead.Logging.IJournalFilter,Crockhead.Logging.ILogWriter)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.AddFilter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.RemoveFilter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.RemoveAllFilters">
            <summary>
            필터 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.ContainsWriter(Crockhead.Logging.IJournalFilter)">
            <summary>
            필터 포함 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Crockhead#Logging#ILogger#Log(Crockhead.Logging.ILogEntry)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Crockhead#Logging#IJournalLogger#Log(Crockhead.Logging.IJournalEntry)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Trace(System.String)">
            <summary>
            추적.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Debug(System.String)">
            <summary>
            디버그.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Information(System.String)">
            <summary>
            정보.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Warning(System.String)">
            <summary>
            경고.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Error(System.String)">
            <summary>
            오류.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Journal.Critical(System.String)">
            <summary>
            치명적인 오류.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.JournalEntry">
            <summary>
            일지 기록 데이터.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.JournalEntry.DateTime">
            <summary>
            기록 일자.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.JournalEntry.Level">
            <summary>
            수준.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.JournalEntry.Message">
            <summary>
            내용.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.JournalEntry.Exception">
            <summary>
            예외.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.JournalEntry.#ctor(System.DateTime,Crockhead.Logging.JournalLevel,System.String,System.Exception)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.JournalFormatter">
            <summary>
            기본 일지 형식 지정자.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.JournalFormatter.Crockhead#Logging#ILogFormatter#Format(Crockhead.Logging.ILogger,Crockhead.Logging.ILogEntry)">
            <summary>
            양식에 맞춘 문자열로 변환.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.JournalFormatter.Format(Crockhead.Logging.IJournalLogger,Crockhead.Logging.IJournalEntry)">
            <summary>
            일지 양식에 맞춘 문자열로 변환.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.JournalLevel">
            <summary>
            일지 수준.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.None">
            <summary>
            없음.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Trace">
            <summary>
            추적.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Debug">
            <summary>
            디버그.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Information">
            <summary>
            정보.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Warning">
            <summary>
            경고.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Error">
            <summary>
            오류.
            <para>기능적인 실패.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Critical">
            <summary>
            심각한 오류.
            <para>주요 시스템 기능 실패.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.Fatal">
            <summary>
            치명적인 오류.
            <para>애플리케이션 작동을 위한 필수 기능 실패.</para>
            </summary>
        </member>
        <member name="F:Crockhead.Logging.JournalLevel.All">
            <summary>
            전부.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.JournalLevelFilter">
            <summary>
            일지 수준 필터.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.JournalLevelFilter.AllowLevel">
            <summary>
            허용 레벨.
            <para>이넘플래그로 여러개 결합 가능.</para>
            </summary>
        </member>
        <member name="M:Crockhead.Logging.JournalLevelFilter.#ctor(Crockhead.Logging.JournalLevel)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.JournalLevelFilter.Crockhead#Logging#IJournalFilter#ShouldLog(Crockhead.Logging.IJournalLogger,Crockhead.Logging.IJournalEntry)">
            <summary>
            엔트리를 로그 해야하는지 여부.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.ILogEntry">
            <summary>
            로그 기록 데이터 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.ILogEntry.DateTime">
            <summary>
            기록 일자.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.ILogEntry.Message">
            <summary>
            내용.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.ILogEntry.Exception">
            <summary>
            예외.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.ILogFormatter">
            <summary>
            로그 형식 지정자 인터페이스.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogFormatter.Format(Crockhead.Logging.ILogger,Crockhead.Logging.ILogEntry)">
            <summary>
            양식에 맞춘 문자열로 변환.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.ILogger">
            <summary>
            기록 처리자 인터페이스.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.ILogger.Name">
            <summary>
            이름 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.ILogger.IsEnabled">
            <summary>
            사용 여부 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.SetEnable(System.Boolean)">
            <summary>
            사용 여부 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.SetFormatter(Crockhead.Logging.ILogFormatter)">
            <summary>
            형식 지정자 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.AddWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.RemoveWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.RemoveAllWriters">
            <summary>
            기록 처리자 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.ContainsWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 포함 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogger.Log(Crockhead.Logging.ILogEntry)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.ILogWriter">
            <summary>
            로그 기록 처리자 인터페이스.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.ILogWriter.Write(Crockhead.Logging.ILogger,System.String)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.Logger">
            <summary>
            로그 처리자.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.Logger.Entry">
            <summary>
            기본 기록 데이터.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.Entry.DateTime">
            <summary>
            기록 일자.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.Entry.Message">
            <summary>
            내용.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.Entry.Exception">
            <summary>
            예외.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.Entry.#ctor(System.DateTime,System.String,System.Exception)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.Logger.Formatter">
            <summary>
            기본 형식 지정자.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.Formatter.Crockhead#Logging#ILogFormatter#Format(Crockhead.Logging.ILogger,Crockhead.Logging.ILogEntry)">
            <summary>
            양식에 맞춘 문자열로 변환.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Logger.m_Locked">
            <summary>
            락.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Logger.m_Name">
            <summary>
            이름.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Logger.m_IsEnabled">
            <summary>
            사용 여부.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Logger.m_Writers">
            <summary>
            기록 처리자 목록.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Logger.m_Formatter">
            <summary>
            형식 지정자.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.Name">
            <summary>
            이름 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.IsEnabled">
            <summary>
            사용 여부 프로퍼티.
            </summary>
        </member>
        <member name="P:Crockhead.Logging.Logger.AsLogger">
            <summary>
            인터페이스 변환 프로퍼티.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.#ctor(System.String)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.#ctor(System.String,Crockhead.Logging.ILogWriter,Crockhead.Logging.ILogFormatter)">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.OnDispose(System.Boolean)">
            <summary>
            해제됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.SetEnable(System.Boolean)">
            <summary>
            사용 여부 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.SetFormatter(Crockhead.Logging.ILogFormatter)">
            <summary>
            형식 지정자 설정.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.AddWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.RemoveWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.RemoveAllWriters">
            <summary>
            기록 처리자 전체 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.ContainsWriter(Crockhead.Logging.ILogWriter)">
            <summary>
            기록 처리자 포함 여부.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.Crockhead#Logging#ILogger#Log(Crockhead.Logging.ILogEntry)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.Log(System.String)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Logger.Log(System.Exception)">
            <summary>
            기록.
            </summary>
        </member>
        <member name="T:Crockhead.Logging.Loggers">
            <summary>
            로그 유틸리티.
            </summary>
        </member>
        <member name="F:Crockhead.Logging.Loggers.s_Loggers">
            <summary>
            로거 목록.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.#cctor">
            <summary>
            생성됨.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.CreateLogger``1(System.String)">
            <summary>
            로거 생성.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.AddLogger(Crockhead.Logging.ILogger)">
            <summary>
            로거 추가.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.RemoveLogger(System.String)">
            <summary>
            로거 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.RemoveAllLoggers">
            <summary>
            모든 로거 제거.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.GetLoggerIfExists(System.String)">
            <summary>
            로거가 존재 할 경우만 반환.
            </summary>
        </member>
        <member name="M:Crockhead.Logging.Loggers.GetLogger``1(System.String)">
            <summary>
            로거를 찾아서 반환, 만일 없다면 생성 후 반환.
            </summary>
        </member>
    </members>
</doc>
